@@ 
@@ Yes, these demonstrations are fairly simplistic pieces of MUSH code.  The purpose is to demo the compiler capabilities.
@@ 
@@ 
@@ These are passthrough comments which will appear in the output file.
@@ * 0x00.incTest.msh is a demonstration of the INCLUDE compiler directive.  The file will be included as if it were a header in 0x01.coreGlobalsObject.msh at compile time.
@@ 
@@ 
@@ Demonstrating includes feature.
@@ 
@@ 
@@ I'm a lousy poet
@@ 
th [set(%!,myTestAttribute:[add(1,2)]%bOh\, to be a tree.%b%bA-blowin' in the bree.%b[add(2,4)]%bJust a'droppin' my sticks\, never carryin' nobody's bricks.%b)]
@@ 
@@ Now that we've set an attribute upon ourself, we'd better do something with it!
@@ 
th [u(myTestAttribute)]
@@ 
@@ I've never been very good at selling myself.
@@ 
th [ansi(hg,Hopefully you have color on and bright green isn't too obnoxious!)]
@@ 
@@ This is the end of 0x00.incTest.msh
@@ 
@@ 
@@ Create the demo code object using think and side effect functions so the dbref may be set directly onto your player bit at the same time
@@ 
think [set(%!,demoCodeObject:[create(Demo Code Object,0)])]
@@ 
@@ Lock the demo code object to self (%! always returns the dbref of the object invoking the substitution)
@@ Using the cVar name here because it's already set into the database - this is our macro reference to [v(demoCodeObject)] - the function call that retrieves the object's dbref
@@ 
@lock [v(demoCodeObject)]=%!
@@ 
@@ Uselock the demo code object
@@ 
@lock/use [v(demoCodeObject)]=%!
@set [v(demoCodeObject)]=!HALT
@@ 
@@ For Penn and I think TinyMUSH
@@ 
@set [v(demoCodeObject)]=!NO_COMMAND
@@ 
@@ For TinyMUX
@@ 
@set [v(demoCodeObject)]=COMMANDS
@@ 
@@ Where capstr() simply capitalizes the first letter of the first word in a string (ie sentence or paragraph), the capWords function capitalizes each word in a phrase or each item in a
@@ delimited list.  This can be handy where you're creating a chargen system and you want your staffers to be able to lazily enter multi-word stat names without capitalizing them, but you
@@ want them to come out in storage in neatly capitalized format.
@@ 
@@ ie:  Your staffer types:  +stat/add lock picking
@@ Your code stores:    Lock Picking
@@ 
@@ Usage:
@@ u( fn-capWords, list, inputDelimiter, outputDelimiter )
@@ 
@@ ie: u(fn-capWords,lock picking,%b,%b) -> Lock Picking
@@ ie: u(fn-capWords,lock picking,%b,_) -> Lock_Picking
@@ 
&fn-capWords [v(demoCodeObject)]=iter(%0,capstr(##),%1,%2)
@@ 
@@ Characters known to be accepted in MUSH passwords
@@ 
&var-passwdChars [v(demoCodeObject)]=! # & ' + - _ @ 0 1 2 3 4 5 6 7 8 9 A a B b C c D d E e F f G g H h I i J j K k L l M m N n O o P p Q q R r S s T t U u V v W w X x Y y Z z
@@ 
@@ Generates a random password using MUSH-friendly password characters.  Generated passwords will be between minLength and maxLength characters long.
@@ * This function will not allow a minLength less than 4 or a maxLength less than 8, but will not error - it automatically adjusts null or invalid arguments.
@@ * This function will not allow a maxLength less than minLength, but will not error - it automatically adjusts maxLength to be equal to minLength if
@@ the user supplies an invalid argument pair
@@ 
@@ USAGE:
@@ u( fn-randPass, minLength, maxLength )
@@ 
@@ ie:  u(fn-randPass) -> SG_1X (5 characters)
@@ * This works on PennMUSH 1.8.6p1rc1 but may not work on other MUSH platforms or Penn versions because functions declared with argument signatures
@@ commonly demand arguments in callouts (even if those arguments are blank, the platform demands a comma)
@@ * In this case, the function automatically adjusts its arguments to minLength 4, maxLength 8
@@ ie:  u(fn-randPass,,) -> O7-Dym (6 characters)
@@ * This works on PennMUSH 1.8.6p1rc1 even with null_eq_zero = no
@@ * In this case, the function automatically adjusts its arguments to minLength 4, maxLength 8
@@ ie:  u(fn-randPass,12,6) -> @e'By&74vZ8p (12 characters)
@@ * In this case, the function automatically adjusts its maxLength argument to 12, since maxLength may not be less than minLength.  Such calls will
@@ always return passwords of exactly minLength passwords since minLength and maxLength will be the same every time.
@@ ie:  u(fn-randPass,8,12) -> em!VXfyEN (9 characters)
@@ * This represents a syntactically and argumentatively perfect usage of the function.
@@ 
&fn-randPass [v(demoCodeObject)]=[setq(8,v(var-passwdChars))][setq(9,words(%q8,%b))][iter(lnum(1,rand(max(4,if(not(%0),0,%0)),max(8,if(not(%1),0,%1),if(not(%0),0,%0)))),elements(%q8,rand(1,%q9),%b),%b,)]
@@ 
@@ A command that calls out to the randPass function above to generate a random password between minLength and maxLength characters long.
@@ 
@@ USAGE:
@@ +getRandPass minLength/MaxLength
@@ 
@@ See fn-randPass for return value info
@@ 
&cmd-getRandPass [v(demoCodeObject)]=$+getRandPass */*:@pemit %#=[u(fn-randPass,%0,%1)];
@@ 
@@ A command-output error header for uniformity
@@ 
&fn-hdrError [v(demoCodeObject)]=[ansi(hr,%0>%b%b)]
@@ 
@@ A command-output success header for uniformity
@@ 
&fn-hdrSuccess [v(demoCodeObject)]=[ansi(hg,%0>%b%b)]
@@ 
@@ What follows is some sample code for a super-simple chargen prototype.  This is just the basic outline for defining Sheet Sections, ie the sections
@@ that stats reside in, and the stats themselves, then listing those sections and stats.
@@ 
@@ This is not a demonstration of MUSH code.  It's not intended for portability across MUSH platforms.  It's not even really meant to run or be useful as
@@ a chargen.  It's intended to demonstrate the features of the compiler in a real-world application,
@@ 
@@ 
@@ Contains a list of bad/forbidden characters that shall not be permitted in user-elected stat names and descriptions
@@ 
&var-restrictStatStringChars [v(demoCodeObject)]=| :
@@ 
@@ Retrieves a static informational message regarding restricted characters in sheet section and stat names.  This is essentially just a macro for ease and uniformity.
@@ 
@@ USAGE:
@@ u(fn-getRestrictedCharMsg)
@@ 
&fn-getRestrictedCharMsg [v(demoCodeObject)]=You must not use%b[itemize(v(var-restrictStatStringChars),%b,or,\,)]%bin section or stat names.
@@ 
@@ Tests a given user input against the value of var-restrictStatStringChars to determine if the specified value is a valid stat name, for use as a sheetSection or sheetStat name or description.
@@ 
@@ USAGE:
@@ u( fn-isGoodStatString, userString )
@@ 
@@ Returns 1 if the string is good/valid.  Otherwise 0.
@@ 
&fn-isGoodStatString [v(demoCodeObject)]=[not(iter(escape(v(var-restrictStatStringChars)),if(t(pos(##,%0)),1[ibreak()],),%b,))]
@@ 
@@ A variable container attribute containing defined Sheet Sections.  This is effectively a one-dimensional array whose elements are pipe-delimited.
@@ 
&var-sheetSections [v(demoCodeObject)]=Attributes|Demographics|Perks|Skills
@@ 
@@ Retrieves the array index of a sheet section.  User input may either be an index number to test for validity or a partial/abbreviated case-insensitive section name.
@@ 
@@ USAGE:
@@ u(fn-getSectionIndex, sheetSection)
@@ 
@@ Returns the array index number of the sheet section where the section name will be found in the sheetSections attribute and/or where the section stats list
@@ will be found in sheetStats, or returns 0 if the input index is outside the bounds of the section array or if the section name does not match any defined
@@ section name.
@@ 
&fn-getSectionIndex [v(demoCodeObject)]=[if(isnum(%0),if(cand(gt(%0,0),lte(%0,words(v(var-sheetSections),|)),lte(%0,words(v(var-sheetStats),|))),%0,0),match(lcstr(v(var-sheetSections)),[lcstr(edit(%0,%b,_))]*,|))]
@@ 
@@ Retrieves the full and capitalized proper name of a sheet section.  User input may either be an index number or a partial/abbreviated case-insensitive section name.
@@ 
@@ USAGE:
@@ u(fn-getSectionName, sheetSection)
@@ 
@@ Returns the full and capitalized proper name of the sheet section specified, or returns 0 if the input index is outside the bounds of the section array or if the
@@ partial section name does not match any defined section name.
@@ 
&fn-getSectionName [v(demoCodeObject)]=[if(t(u(fn-getSectionIndex,%0)),u(fn-capWords,edit(elements(v(var-sheetSections),u(fn-getSectionIndex,%0),|),_,%b),%b,%b),0)]
@@ 
@@ Adds a sheet section to the chargen database.
@@ 
@@ USAGE:
@@ u( fn-addSection, sectionName )
@@ 
@@ Returns 1 if the section was added successfully, with no errors.  Returns 0 if some error was encountered, which would indicate that restricted characters were entered by the user
@@ in section name.
@@ 
&fn-addSection [v(demoCodeObject)]=[if(u(fn-isGoodStatString,%0),[set(%!,var-sheetSections:[setunion(v(var-sheetSections),u(fn-capWords,edit(%0,%b,_),_,_),|)])][set(%!,var-sheetStats:[insert(v(var-sheetStats),u(fn-getSectionIndex,%0),,|)])]1,0)]
@@ 
@@ Adds a section with the specified name to the list of chargen sections.  We don't need to do any testing to see if the section already exists, because the use of setunion() in the addSection
@@ function neatly overwrites any existing definition.    Section name must be the name of the section you wish to add, but you don't need to apply capitalization.  Don't put in underscores, use
@@ spaces.  Section names are prohibited from using characters listed in the var-restrictStatStringChars attribute.
@@ 
&cmd-addCGSection [v(demoCodeObject)]=$+addCGSection *:@pemit %#=[if(u(fn-addSection,%0),[u(fn-hdrSuccess,+addCGSection)] Added section '[u(fn-getSectionName,%0)]',[u(fn-hdrError,+addCGSection)] Could not add section '[%0]' - invalid characters in section name string.%b%b[u(fn-getRestrictedCharMsg)])];
@@ 
@@ Deletes a sheet section from the chargen database.
@@ 
@@ USAGE:
@@ u( fn-delSection, sectionName )
@@ 
@@ Returns 1 if the section was deleted successfully, with no errors.  Returns 0 if some error was encountered, which would indicate that the specified section name did not exist when
@@ the function was called
@@ 
&fn-delSection [v(demoCodeObject)]=[if(u(fn-getSectionIndex,%0),[set(%!,var-sheetStats:[ldelete(v(var-sheetStats),u(fn-getSectionIndex,%0),|,|)])][set(%!,var-sheetSections:[ldelete(v(var-sheetSections),u(fn-getSectionIndex,%0),|,|)])]1,0)]
@@ 
@@ Deletes a section with the specified name or index number from the list of chargen sections.  We don't need to do any testing to see if the section already exists, because the use of
@@ ldelete() with getSectionIndex() in the delSection function neatly performs these checks for us.
@@ 
&cmd-delCGSection [v(demoCodeObject)]=$+delCGSection *:@pemit %#=[setq(0,u(fn-getSectionName,%0))][if(u(fn-delSection,%0),[u(fn-hdrSuccess,+delCGSection)] Deleted section '[%q0]',[u(fn-hdrError,+delCGSection)] Could not delete section '[%0]' - section not found.)];
@@ 
@@ A variable container attribute containing defined Sheet Stats.  This is effectively a multi-dimensional array where the first dimension is pipe-delimited and represents stats divided into the
@@ Sheet Sections they belong to, and within each Section a second dimension is colon-delimited representing the collection of stats that belongs to that Section.
@@ 
&var-sheetStats [v(demoCodeObject)]=|Full_Name:Apparent_Age:Date_Of_Birth||
@@ 
@@ Retrieves the stats collection relating to the specified sheet section.  User input may either be an index number or a partial/abbreviated case-insensitive section name.
@@ 
@@ USAGE:
@@ u(fn-getSectionStats, sheetSection)
@@ 
@@ Returns the full collection of colon-delimited stats belonging to the specified sheetSection, or returns 0 if the input index is outside the bounds of the section array or if the
@@ partial section name does not match any defined section name.
@@ 
&fn-getSectionStats [v(demoCodeObject)]=[if(t(u(fn-getSectionIndex,%0)),elements(v(var-sheetStats),u(fn-getSectionIndex,%0),|),0)]
@@ 
@@ Retrieves the array index of a sheet stat, within a specified sheet section, by its partial/abbreviated name, and is not case sensitive
@@ 
@@ USAGE:
@@ u(fn-getStatIndex, sectionName, statName)
@@ 
@@ Returns the array index into the specified section if sectionName and statName are valid, and statName is in sectionName
@@ Returns 0 if sectionName is valid and statName is not
@@ Returns -1 if sectionName is not valid
@@ 
&fn-getStatIndex [v(demoCodeObject)]=[if(t(u(fn-getSectionIndex,%0)),if(isnum(%1),if(cand(gt(%1,0),lte(%1,words(u(fn-getSectionStats,%0),:)),lte(%1,words(u(fn-getSectionStats,%0),:))),%1,0),match(lcstr(u(fn-getSectionStats,%0)),[lcstr(edit(%1,%b,_))]*,:)),-1)]
@@ 
@@ Retrieves the full and capitalized proper name of a sheet stat from the specified Sheet Section.  Sheet Section may be either an index number or a partial/abbreviated case-insensitive
@@ section name.  Stat may either be an index number or a partial/abbreviated case-insensitive stat name.
@@ 
@@ USAGE:
@@ u(fn-getStatName, sheetSection, sheetStat)
@@ 
@@ Returns the full and capitalized proper name of the sheet stat specified if sectionName and statName are valid, and statName is in sectionName
@@ Returns 0 if sectionName is valid and statName is not
@@ Returns -1 if sectionName is not valid
@@ 
&fn-getStatName [v(demoCodeObject)]=[if(t(u(fn-getStatIndex,%0,%1)),u(fn-capWords,edit(elements(u(fn-getSectionStats,%0),u(fn-getStatIndex,%0,%1),:),_,%b),%b,%b),u(fn-getStatIndex,%0,%1))]
@@ 
@@ Adds a stat with the specified name under the specified Sheet Section.  Sheet Section may be either an index number or a partial/abbreviated case-insensitive section name.
@@ 
@@ USAGE:
@@ u( fn-addStat, sheetSection, statName )
@@ 
@@ Returns 1 if the stat was added successfully.
@@ Returns 0 if the supplied stat name contained invalid characters
@@ Returns -1 if the specified section could not be found.
@@ 
&fn-addStat [v(demoCodeObject)]=[switch(1,not(u(fn-isGoodStatString,%1)),0,not(u(fn-getSectionIndex,%0)),-1,[set(%!,var-sheetStats:[replace(v(var-sheetStats),u(fn-getSectionIndex,%0),setunion(elements(v(var-sheetStats),u(fn-getSectionIndex,%0),|),edit(capWords(%1,%b,%b),%b,_),:),|)])]1)]
@@ 
@@ Adds a stat with the specified name to the list of stats in the specified chargen section.  Sheet Section may be either an index number or a partial/abbreviated
@@ case-insensitive section name.  Stat name must be the name of the stat you wish to add, but you don't need to apply capitalization.  Don't put in underscores, use
@@ spaces.  Stat names are prohibited from using characters listed in the var-restrictStatStringChars attribute.
@@ 
@@ USAGE:
@@ +addCGStat sheetSection=statName
&cmd-addCGStat [v(demoCodeObject)]=$+addCGStat *=*:@pemit %#=[switch(u(fn-addStat,%0,%1),1,[u(fn-hdrSuccess,+addCGStat)] Added stat '[u(fn-getStatName,%0,%1)]' to section '[u(fn-getSectionName,%0)]',0,[u(fn-hdrError,+addCGStat)] Could not add stat '[%1]' - invalid characters in stat name string.%b%b[u(fn-getRestrictedCharMsg)],-1,[u(fn-hdrError,+addCGStat)] Could not add stat '[%1]' to section '[%0]' - section not found.,[u(fn-hdrError,+addCGStat)] Unhandled or unknown error encountered.  Contact code staff,)]
@@ 
@@ Deletes the specified stat from the specified Sheet Section.  Sheet Section may be either an index number or a partial/abbreviated case-insensitive section name.  Stat may be either an
@@ index number or a partial/abbreviated case-insensitive stat name.
@@ 
@@ USAGE:
@@ u( fn-delStat, sheetSection, sheetStat )
@@ 
@@ Returns 1 if the stat was deleted successfully.
@@ Returns 0 if the specified stat could not be found.
@@ Returns -1 if the specified section could not be found.
@@ 
&fn-delStat [v(demoCodeObject)]=[switch(1,not(u(fn-getSectionIndex,%0)),-1,not(u(fn-getStatIndex,%0,%1)),0,[set(%!,var-sheetStats:[replace(v(var-sheetStats),u(fn-getSectionIndex,%0),ldelete(u(fn-getSectionStats,%0),u(fn-getStatIndex,%0,%1),:,:),|,|)])]1)]
@@ 
@@ Deletes a stat with the specified name from the list of stats in the specified chargen section.  Sheet Section may be either an index number or a partial/abbreviated
@@ case-insensitive section name.  Stat may be either an index number or a partial/abbreviated case-insensitive stat name.
@@ 
@@ USAGE:
@@ +delCGStat sheetSection=sheetStat
@@ 
&cmd-delCGStat [v(demoCodeObject)]=$+delCGStat *=*:@pemit %#=[setq(0,u(fn-getStatName,%0,%1))][switch(u(fn-delStat,%0,%1),1,[u(fn-hdrSuccess,+delCGStat)] Deleted stat '[%q0]' from section '[u(fn-getSectionName,%0)]',0,[u(fn-hdrError,+delCGStat)] Could not delete stat '[%1]' - stat not found.,-1,[u(fn-hdrError,+delCGStat)] Could not delete stat '[%1]' from section '[%0]' - section not found.,[u(fn-hdrError,+delCGStat)] Unhandled or unknown error encountered.  Contact code staff,)]
@@ 
@@ Lists CG Sections and their Subordinate Stats that have been defined.
@@ 
&cmd-listCGStats [v(demoCodeObject)]=$+listCGStats:@pemit %#=[iter(v(var-sheetSections),[ansi(h,\[#@\]%b%b[u(fn-getSectionName,#@)])]%r%b%b%b%b[itemize(iter(u(fn-getSectionStats,#@),\[[inum(0)]\]%b[u(fn-capWords,itext(0),_,%b)],:,:),:,and,\,)],|,%r%r)]
@@ 
@@ So after I got done with this demo project, I found some bugs that amount to flaws in my logic right from the start.  A big one is that when you add CG Sections, if the Section already exists,
@@ setunion() does indeed automagically prevent creating a new section --in var-sheetSections-- but a new space for that section's stats (which already exists) is still created in var-sheetStats.
@@ 
@@ This is a bug in the MUSH Code, not in the MUSH Compiler, and the purpose of the softcode project is to demo the compiler, which works fine!
@@ 
@@ Also, in case you didn't read the full commentary above, this is NOT a full chargen project.  It's a small demo representing the basic foundation of a chargen stats DB with section and stats
@@ storage.  That's it.  The purpose of it is to demo a relatively common softcode system with intertwining functions, which can be really simple if the source can be kept in a manageable
@@ state but which really quickly becomes a godawful headache even for an experienced coder without some basic support features such as are provided by this "compiler" product.
@@ 
@@ Apart from that:
@@ 
@@ +addcgsection <section name>
@@ * Section Name will have each word automatically capitalized if you input it with spaces between words.
@@ +delcgsection <section index number> or <section name>
@@ * Section Name may be a partial name and need not be case sensitive.
@@ 
@@ +addcgstat <section index number> or <section name>=<stat name>
@@ * Section Name may be a partial name and need not be case sensitive.
@@ * Stat Name will have each word automatically capitalized if you input it with spaces between words.
@@ +delcgstat <section index number> or <section name>=<stat index number> or <stat name>
@@ * Section Name may be a partial name and need not be case sensitive.
@@ * Stat Name may be a partial name and need not be case sensitive.
@@ 
@@ +listcgstats
@@ * Lists defined section names and index numbers, and the stats and index numbers within those sections.
@@ 
@@ This softcode is designed for and tested with PennMUSH 1.8.6 p1rc1.  Samples for additional platforms may be provided in the future, time and/or motivation permitting.
@@ 
